diff --git a/driver-core/src/test/java/com/datastax/driver/core/CCMBridge.java b/driver-core/src/test/java/com/datastax/driver/core/CCMBridge.java
index 80d461aa5..de1867dea 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/CCMBridge.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/CCMBridge.java
@@ -1348,6 +1348,9 @@ public class CCMBridge implements CCMAccess {
       String quote = isWindows() ? "\"" : "";
       for (String jvmArg : jvmArgs) {
         // Windows requires jvm arguments to be quoted, while *nix requires unquoted.
+        if (scylla && jvmArg.startsWith("-Dcassandra")) {
+          continue;
+        }
         allJvmArgs.append(" ");
         allJvmArgs.append(quote);
         allJvmArgs.append("--jvm_arg=");
diff --git a/driver-core/src/test/java/com/datastax/driver/core/CCMBridgeTest.java b/driver-core/src/test/java/com/datastax/driver/core/CCMBridgeTest.java
index 2f340b3a7..636763691 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/CCMBridgeTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/CCMBridgeTest.java
@@ -32,6 +32,7 @@ public class CCMBridgeTest extends CCMTestsSupport {
   @Test(groups = "short")
   @ScyllaVersion(
       maxOSS = "6.2.0",
+      maxEnterprise = "2025.1.0",
       description = "JMX was dropped in scylladb/3cd2a6173668c5a13b6e674f912ff597f76422f5")
   public void should_make_JMX_connection() throws Exception {
     InetSocketAddress addr1 = ccm().jmxAddressOfNode(1);
diff --git a/driver-core/src/test/java/com/datastax/driver/core/ClusterStressTest.java b/driver-core/src/test/java/com/datastax/driver/core/ClusterStressTest.java
index 74befba29..e5867e506 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/ClusterStressTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/ClusterStressTest.java
@@ -35,6 +35,7 @@ import org.slf4j.LoggerFactory;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.Test;
 
+@CCMConfig(jvmArgs = {"--smp", "1"})
 public class ClusterStressTest extends CCMTestsSupport {
 
   private static final Logger logger = LoggerFactory.getLogger(ClusterStressTest.class);
diff --git a/driver-core/src/test/java/com/datastax/driver/core/ControlConnectionTest.java b/driver-core/src/test/java/com/datastax/driver/core/ControlConnectionTest.java
index 7fa9c8550..9ac6b9135 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/ControlConnectionTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/ControlConnectionTest.java
@@ -119,13 +119,14 @@ public class ControlConnectionTest extends CCMTestsSupport {
     Cluster cluster = register(createClusterBuilder().build());
     Session session = cluster.connect();
     session.execute(
-        "create keyspace ks WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1}");
-    session.execute("create type ks.foo (i int)");
+        "create keyspace ControlConnectionTest_ks WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1}");
+    session.execute("create type ControlConnectionTest_ks.foo (i int)");
     cluster.close();
 
     // Second driver instance: read UDT definition
     Cluster cluster2 = register(createClusterBuilder().build());
-    UserType fooType = cluster2.getMetadata().getKeyspace("ks").getUserType("foo");
+    UserType fooType =
+        cluster2.getMetadata().getKeyspace("ControlConnectionTest_ks").getUserType("foo");
 
     assertThat(fooType.getFieldNames()).containsExactly("i");
   }
diff --git a/driver-core/src/test/java/com/datastax/driver/core/HostConnectionPoolTest.java b/driver-core/src/test/java/com/datastax/driver/core/HostConnectionPoolTest.java
index 34d382dcb..097d502da 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/HostConnectionPoolTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/HostConnectionPoolTest.java
@@ -597,7 +597,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       allRequests.addAll(requests);
       allRequests.add(MockRequest.send(pool));
 
-      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertPoolSize(pool, 2);
       Connection connection2 = pool.connections[0].get(1);
 
@@ -625,7 +625,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
 
       // Borrowing one more time should resurrect the trashed connection
       allRequests.addAll(MockRequest.sendMany(1, pool));
-      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class), eq(-1), anyInt());
       assertPoolSize(pool, 2);
 
       assertThat(pool.connections[0]).containsExactly(connection2, connection1);
@@ -664,7 +664,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       allRequests.addAll(requests);
       allRequests.add(MockRequest.send(pool));
 
-      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertPoolSize(pool, 2);
       reset(factory);
       Connection connection2 = pool.connections[0].get(1);
@@ -699,7 +699,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       allRequests.addAll(requests);
       allRequests.add(MockRequest.send(pool));
       assertThat(connection2.inFlight.get()).isEqualTo(101);
-      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class), eq(-1), anyInt());
       assertPoolSize(pool, 2);
 
       // Borrow again to get the new connection
@@ -742,7 +742,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       allRequests.addAll(requests);
       allRequests.add(MockRequest.send(pool));
 
-      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertThat(pool.connections[0]).hasSize(2);
 
       // Return enough times to get back under the threshold where one connection is enough
diff --git a/driver-core/src/test/java/com/datastax/driver/core/PreparedStatementTest.java b/driver-core/src/test/java/com/datastax/driver/core/PreparedStatementTest.java
index 168b86730..27bf7ac5a 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/PreparedStatementTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/PreparedStatementTest.java
@@ -775,6 +775,7 @@ public class PreparedStatementTest extends CCMTestsSupport {
    * @since 2.2.0
    */
   @Test(groups = "long")
+  @ScyllaSkip /* @IntegrationTestDisabledScyllaUnsupportedFunctionality @IntegrationTestDisabledScyllaQueryTrace */
   public void should_create_tombstone_when_null_value_on_bound_statement() {
     PreparedStatement prepared =
         session().prepare("INSERT INTO " + SIMPLE_TABLE + " (k, i) VALUES (?, ?)");
diff --git a/driver-core/src/test/java/com/datastax/driver/core/SchemaChangesCCTest.java b/driver-core/src/test/java/com/datastax/driver/core/SchemaChangesCCTest.java
index 0538cf87e..d57301bb7 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/SchemaChangesCCTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/SchemaChangesCCTest.java
@@ -33,7 +33,7 @@ import java.util.concurrent.TimeUnit;
 import org.mockito.ArgumentCaptor;
 import org.testng.annotations.Test;
 
-@CCMConfig(numberOfNodes = 2, dirtiesContext = true, createCluster = false)
+@CCMConfig(numberOfNodes = 3, dirtiesContext = true, createCluster = false)
 public class SchemaChangesCCTest extends CCMTestsSupport {
 
   private static final int NOTIF_TIMEOUT_MS = 5000;
diff --git a/driver-core/src/test/java/com/datastax/driver/core/SessionLeakTest.java b/driver-core/src/test/java/com/datastax/driver/core/SessionLeakTest.java
index aa0f57379..b7c0145a1 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/SessionLeakTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/SessionLeakTest.java
@@ -23,6 +23,7 @@ import static org.assertj.core.api.Assertions.fail;
 
 import com.datastax.driver.core.exceptions.InvalidQueryException;
 import com.datastax.driver.core.utils.SocketChannelMonitor;
+import java.net.InetSocketAddress;
 import java.util.concurrent.TimeUnit;
 import org.testng.annotations.Test;
 
@@ -51,10 +52,15 @@ public class SessionLeakTest extends CCMTestsSupport {
 
     // ensure sessions.size() returns with 1 control connection + core pool size.
     int corePoolSize = TestUtils.numberOfLocalCoreConnections(cluster);
+    int shardedConns = TestUtils.numberOfLocalCoreConnectionsSharded(cluster);
     Session session = cluster.connect();
 
     assertThat(cluster.manager.sessions.size()).isEqualTo(1);
-    assertOpenConnections(1 + corePoolSize, cluster);
+    if (ccm().getScyllaVersion() != null) {
+      assertOpenConnections(1 + shardedConns, cluster);
+    } else {
+      assertOpenConnections(1 + corePoolSize, cluster);
+    }
 
     // ensure sessions.size() returns to 0 with only 1 active connection (the control connection)
     session.close();
@@ -74,7 +80,11 @@ public class SessionLeakTest extends CCMTestsSupport {
     // there should be corePoolSize more connections to accommodate for the new host.
     Session thisSession = cluster.connect();
     assertThat(cluster.manager.sessions.size()).isEqualTo(1);
-    assertOpenConnections(1 + (corePoolSize * 2), cluster);
+    if (ccm().getScyllaVersion() != null) {
+      assertOpenConnections(1 + (shardedConns * 2), cluster);
+    } else {
+      assertOpenConnections(1 + (corePoolSize * 2), cluster);
+    }
 
     // ensure bootstrapping a node does not create additional connections that won't get cleaned up
     thisSession.close();
@@ -119,8 +129,30 @@ public class SessionLeakTest extends CCMTestsSupport {
   }
 
   private void assertOpenConnections(int expected, Cluster cluster) {
+    Integer shardAwareNonSSLPort = null;
+    if (ccm().getScyllaVersion() != null) {
+      ShardingInfo shardingInfo =
+          cluster.getMetadata().allHosts().iterator().next().getShardingInfo();
+      if (shardingInfo != null) {
+        shardAwareNonSSLPort = shardingInfo.getShardAwarePort(false);
+      }
+    }
     assertThat(cluster.getMetrics().getOpenConnections().getValue()).isEqualTo(expected);
-    assertThat(channelMonitor.openChannels(ccm().addressOfNode(1), ccm().addressOfNode(2)).size())
-        .isEqualTo(expected);
+    if (shardAwareNonSSLPort != null) {
+      assertThat(
+              channelMonitor
+                  .openChannels(
+                      ccm().addressOfNode(1),
+                      ccm().addressOfNode(2),
+                      new InetSocketAddress(
+                          ccm().addressOfNode(1).getAddress(), shardAwareNonSSLPort),
+                      new InetSocketAddress(
+                          ccm().addressOfNode(2).getAddress(), shardAwareNonSSLPort))
+                  .size())
+          .isEqualTo(expected);
+    } else {
+      assertThat(channelMonitor.openChannels(ccm().addressOfNode(1), ccm().addressOfNode(2)).size())
+          .isEqualTo(expected);
+    }
   }
 }
diff --git a/driver-core/src/test/java/com/datastax/driver/core/SessionStressTest.java b/driver-core/src/test/java/com/datastax/driver/core/SessionStressTest.java
index ea75f8454..ea70e9081 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/SessionStressTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/SessionStressTest.java
@@ -38,7 +38,9 @@ import org.slf4j.LoggerFactory;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.Test;
 
-@CCMConfig(dirtiesContext = true)
+@CCMConfig(
+    dirtiesContext = true,
+    jvmArgs = {"--smp", "1", "--max-networking-io-control-blocks", "15000"})
 public class SessionStressTest extends CCMTestsSupport {
 
   private static final Logger logger = LoggerFactory.getLogger(SessionStressTest.class);
diff --git a/driver-core/src/test/java/com/datastax/driver/core/TableMetadataTest.java b/driver-core/src/test/java/com/datastax/driver/core/TableMetadataTest.java
index 777ea439f..4c7113eb8 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/TableMetadataTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/TableMetadataTest.java
@@ -36,6 +36,7 @@ import static org.assertj.core.api.Assertions.entry;
 
 import com.datastax.driver.core.utils.CassandraVersion;
 import com.datastax.driver.core.utils.ScyllaSkip;
+import com.datastax.driver.core.utils.ScyllaVersion;
 import com.google.common.collect.ImmutableMap;
 import java.nio.ByteBuffer;
 import org.testng.annotations.Test;
@@ -149,6 +150,11 @@ public class TableMetadataTest extends CCMTestsSupport {
   }
 
   @Test(groups = "short")
+  @ScyllaVersion(
+      maxOSS = "6.3.0",
+      maxEnterprise = "2025.1.0",
+      description =
+          "COMPACT STORAGE discontinued in https://github.com/scylladb/scylladb/pull/16403")
   public void should_parse_compact_static_table() {
     TestUtils.compactStorageSupportCheck(ccm());
     // given
@@ -190,6 +196,11 @@ public class TableMetadataTest extends CCMTestsSupport {
   }
 
   @Test(groups = "short")
+  @ScyllaVersion(
+      maxOSS = "6.3.0",
+      maxEnterprise = "2025.1.0",
+      description =
+          "COMPACT STORAGE discontinued in https://github.com/scylladb/scylladb/pull/16403")
   public void should_parse_dense_table() {
     TestUtils.compactStorageSupportCheck(ccm());
     // given
@@ -215,6 +226,11 @@ public class TableMetadataTest extends CCMTestsSupport {
   }
 
   @Test(groups = "short")
+  @ScyllaVersion(
+      maxOSS = "6.3.0",
+      maxEnterprise = "2025.1.0",
+      description =
+          "COMPACT STORAGE discontinued in https://github.com/scylladb/scylladb/pull/16403")
   public void should_parse_compact_dynamic_table() {
     TestUtils.compactStorageSupportCheck(ccm());
     // given
@@ -251,6 +267,11 @@ public class TableMetadataTest extends CCMTestsSupport {
   }
 
   @Test(groups = "short")
+  @ScyllaVersion(
+      maxOSS = "6.3.0",
+      maxEnterprise = "2025.1.0",
+      description =
+          "COMPACT STORAGE discontinued in https://github.com/scylladb/scylladb/pull/16403")
   public void should_parse_compact_table_with_multiple_clustering_columns() {
     TestUtils.compactStorageSupportCheck(ccm());
     // given
