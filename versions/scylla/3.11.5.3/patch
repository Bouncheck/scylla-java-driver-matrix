diff --git a/driver-core/src/test/java/com/datastax/driver/core/CCMBridge.java b/driver-core/src/test/java/com/datastax/driver/core/CCMBridge.java
index 4c9ba61fc5..110c5cce27 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/CCMBridge.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/CCMBridge.java
@@ -194,6 +194,7 @@ public class CCMBridge implements CCMAccess {
   static {
     String inputCassandraVersion = System.getProperty("cassandra.version");
     String inputScyllaVersion = System.getProperty("scylla.version");
+    GLOBAL_SCYLLA_VERSION_NUMBER = parseScyllaInputVersion(inputScyllaVersion);
 
     String installDirectory = System.getProperty("cassandra.directory");
     String branch = System.getProperty("cassandra.branch");
@@ -206,8 +207,11 @@ public class CCMBridge implements CCMAccess {
       installArgs.add("-v git:" + branch.trim().replaceAll("\"", ""));
     } else if (inputScyllaVersion != null && !inputScyllaVersion.trim().isEmpty()) {
       installArgs.add(" --scylla ");
-      installArgs.add("-v release:" + inputScyllaVersion);
-
+      if (isVersionNumber(inputScyllaVersion)) {
+        installArgs.add("-v release:" + inputScyllaVersion);
+      } else {
+        installArgs.add("-v " + inputScyllaVersion);
+      }
       // Detect Scylla Enterprise - it should start with
       // a 4-digit year.
       if (inputScyllaVersion.matches("\\d{4}\\..*")) {
@@ -246,8 +250,6 @@ public class CCMBridge implements CCMAccess {
     }
     ENVIRONMENT_MAP = ImmutableMap.copyOf(envMap);
 
-    GLOBAL_SCYLLA_VERSION_NUMBER = VersionNumber.parse(inputScyllaVersion);
-
     if (isDse()) {
       GLOBAL_DSE_VERSION_NUMBER = VersionNumber.parse(inputCassandraVersion);
       GLOBAL_CASSANDRA_VERSION_NUMBER = CCMBridge.getCassandraVersion(GLOBAL_DSE_VERSION_NUMBER);
@@ -256,6 +258,14 @@ public class CCMBridge implements CCMAccess {
           GLOBAL_DSE_VERSION_NUMBER,
           GLOBAL_CASSANDRA_VERSION_NUMBER,
           CASSANDRA_INSTALL_ARGS);
+    } else if (GLOBAL_SCYLLA_VERSION_NUMBER != null) {
+      GLOBAL_CASSANDRA_VERSION_NUMBER = VersionNumber.parse(inputCassandraVersion);
+      GLOBAL_DSE_VERSION_NUMBER = null;
+      logger.info(
+          "Tests requiring CCM will by default use Scylla version {} and report Cassandra version {} when asked specifically for it (install arguments: {})",
+          GLOBAL_SCYLLA_VERSION_NUMBER,
+          GLOBAL_CASSANDRA_VERSION_NUMBER,
+          CASSANDRA_INSTALL_ARGS);
     } else {
       GLOBAL_CASSANDRA_VERSION_NUMBER = VersionNumber.parse(inputCassandraVersion);
       GLOBAL_DSE_VERSION_NUMBER = null;
@@ -338,12 +348,40 @@ public class CCMBridge implements CCMAccess {
     return osName != null && osName.startsWith("Windows");
   }
 
+  private static boolean isVersionNumber(String versionString) {
+    try {
+      VersionNumber.parse(versionString);
+    } catch (IllegalArgumentException e) {
+      return false;
+    }
+    return true;
+  }
+
+  private static VersionNumber parseScyllaInputVersion(String versionString) {
+    VersionNumber parsedScyllaVersionNumber = null;
+    try {
+      parsedScyllaVersionNumber = VersionNumber.parse(versionString);
+    } catch (IllegalArgumentException e) {
+      logger.warn(
+          "Failed to parse scylla.version: " + versionString + ". Trying to get it through CCM.",
+          e);
+      parsedScyllaVersionNumber = getScyllaVersionThroughCcm(versionString);
+      logger.info(
+          String.format(
+              "Version string %s corresponds here to version number %s",
+              versionString, parsedScyllaVersionNumber));
+    }
+    return parsedScyllaVersionNumber;
+  }
+
   private final String clusterName;
 
   private final VersionNumber cassandraVersion;
 
   private final VersionNumber dseVersion;
 
+  private final VersionNumber scyllaVersion;
+
   private final int storagePort;
 
   private final int thriftPort;
@@ -378,6 +416,7 @@ public class CCMBridge implements CCMAccess {
       String clusterName,
       VersionNumber cassandraVersion,
       VersionNumber dseVersion,
+      VersionNumber scyllaVersion,
       String ipPrefix,
       int storagePort,
       int thriftPort,
@@ -391,6 +430,7 @@ public class CCMBridge implements CCMAccess {
     this.clusterName = clusterName;
     this.cassandraVersion = cassandraVersion;
     this.dseVersion = dseVersion;
+    this.scyllaVersion = scyllaVersion;
     this.ipPrefix = ipPrefix;
     this.storagePort = storagePort;
     this.thriftPort = thriftPort;
@@ -465,6 +505,10 @@ public class CCMBridge implements CCMAccess {
     return dseVersion;
   }
 
+  public VersionNumber getScyllaVersion() {
+    return scyllaVersion;
+  }
+
   @Override
   public File getCcmDir() {
     return ccmDir;
@@ -792,7 +836,25 @@ public class CCMBridge implements CCMAccess {
     execute(CCM_COMMAND + " node%d setworkload %s", node, workloadStr);
   }
 
-  private String execute(String command, Object... args) {
+  private static VersionNumber getScyllaVersionThroughCcm(String versionString) {
+    File configDir = Files.createTempDir();
+    try {
+      execute(configDir, "ccm create get_version -n 1 --scylla --version %s", versionString);
+      String versionOutput = execute(configDir, "ccm node1 versionfrombuild");
+      return VersionNumber.parse(versionOutput.replace("ccmout> ", "").trim());
+    } catch (RuntimeException cause) {
+      throw new RuntimeException(
+          "Error during getting Scylla version through ccm commands.", cause);
+    } finally {
+      try {
+        execute(configDir, "ccm remove get_version");
+      } catch (Exception ignored) {
+      }
+    }
+  }
+
+  private static String execute(File ccmDir, String command, Object... args) {
+    Logger logger = CCMBridge.logger;
     String fullCommand = String.format(command, args) + " --config-dir=" + ccmDir;
     Closer closer = Closer.create();
     // 10 minutes timeout
@@ -856,6 +918,10 @@ public class CCMBridge implements CCMAccess {
     return sw.toString();
   }
 
+  private String execute(String command, Object... args) {
+    return execute(this.ccmDir, command, args);
+  }
+
   /**
    * Waits for a host to be up by pinging the TCP socket directly, without using the Java driver's
    * API.
@@ -949,10 +1015,12 @@ public class CCMBridge implements CCMAccess {
     private static final Pattern RANDOM_PORT_PATTERN = Pattern.compile(RANDOM_PORT);
 
     private String ipPrefix = TestUtils.IP_PREFIX;
+    private String providedClusterName = null;
     int[] nodes = {1};
     private int[] jmxPorts = {};
     private boolean start = true;
     private boolean dse = isDse();
+    private boolean scylla = GLOBAL_SCYLLA_VERSION_NUMBER != null;
     private boolean startSniProxy = false;
     private VersionNumber version = null;
     private final Set<String> createOptions = new LinkedHashSet<String>();
@@ -991,6 +1059,15 @@ public class CCMBridge implements CCMAccess {
       return this;
     }
 
+    /**
+     * Builder takes care of naming and numbering clusters on its own. Use if you really need a
+     * specific name
+     */
+    public Builder withClusterName(String clusterName) {
+      this.providedClusterName = clusterName;
+      return this;
+    }
+
     /** Enables SSL encryption. */
     public Builder withSSL() {
       cassandraConfiguration.put("client_encryption_options.enabled", "true");
@@ -1035,8 +1112,8 @@ public class CCMBridge implements CCMAccess {
     }
 
     /**
-     * The Cassandra or DSE version to use. If not specified the globally configured version is used
-     * instead.
+     * The Cassandra or DSE or Scylla version to use. If not specified the globally configured
+     * version is used instead.
      */
     public Builder withVersion(VersionNumber version) {
       this.version = version;
@@ -1049,6 +1126,12 @@ public class CCMBridge implements CCMAccess {
       return this;
     }
 
+    /** Indicates whether or not this cluster is meant to be a Scylla cluster. */
+    public Builder withScylla(boolean scylla) {
+      this.scylla = scylla;
+      return this;
+    }
+
     /**
      * Free-form options that will be added at the end of the {@code ccm create} command (defaults
      * to {@link #CASSANDRA_INSTALL_ARGS} if this is never called).
@@ -1115,19 +1198,30 @@ public class CCMBridge implements CCMAccess {
       // be careful NOT to alter internal state (hashCode/equals) during build!
       String clusterName = TestUtils.generateIdentifier("ccm_");
 
+      if (providedClusterName != null) clusterName = providedClusterName;
+
       VersionNumber dseVersion;
       VersionNumber cassandraVersion;
+      VersionNumber scyllaVersion;
       boolean versionConfigured = this.version != null;
       // No version was explicitly provided, fallback on global config.
       if (!versionConfigured) {
+        scyllaVersion = GLOBAL_SCYLLA_VERSION_NUMBER;
         dseVersion = GLOBAL_DSE_VERSION_NUMBER;
         cassandraVersion = GLOBAL_CASSANDRA_VERSION_NUMBER;
       } else if (dse) {
         // given version is the DSE version, base cassandra version on DSE version.
+        scyllaVersion = null;
         dseVersion = this.version;
         cassandraVersion = getCassandraVersion(dseVersion);
+      } else if (scylla) {
+        scyllaVersion = this.version;
+        dseVersion = null;
+        // Versions from 5.1 to 6.2.0 seem to report release_version 3.0.8 in system_local
+        cassandraVersion = VersionNumber.parse("3.0.8");
       } else {
         // given version is cassandra version.
+        scyllaVersion = null;
         dseVersion = null;
         cassandraVersion = this.version;
       }
@@ -1182,6 +1276,7 @@ public class CCMBridge implements CCMAccess {
               clusterName,
               cassandraVersion,
               dseVersion,
+              scyllaVersion,
               ipPrefix,
               storagePort,
               thriftPort,
@@ -1391,6 +1486,7 @@ public class CCMBridge implements CCMAccess {
 
       if (ipPrefix != builder.ipPrefix) return false;
       if (dse != builder.dse) return false;
+      if (scylla != builder.scylla) return false;
       if (!Arrays.equals(nodes, builder.nodes)) return false;
       if (version != null ? !version.equals(builder.version) : builder.version != null)
         return false;
diff --git a/driver-core/src/test/java/com/datastax/driver/core/ClusterStressTest.java b/driver-core/src/test/java/com/datastax/driver/core/ClusterStressTest.java
index 74befba297..e5867e5067 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/ClusterStressTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/ClusterStressTest.java
@@ -35,6 +35,7 @@ import org.slf4j.LoggerFactory;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.Test;
 
+@CCMConfig(jvmArgs = {"--smp", "1"})
 public class ClusterStressTest extends CCMTestsSupport {
 
   private static final Logger logger = LoggerFactory.getLogger(ClusterStressTest.class);
diff --git a/driver-core/src/test/java/com/datastax/driver/core/HostConnectionPoolTest.java b/driver-core/src/test/java/com/datastax/driver/core/HostConnectionPoolTest.java
index 34d382dcb8..a10cb17ba8 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/HostConnectionPoolTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/HostConnectionPoolTest.java
@@ -597,7 +597,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       allRequests.addAll(requests);
       allRequests.add(MockRequest.send(pool));
 
-      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertPoolSize(pool, 2);
       Connection connection2 = pool.connections[0].get(1);
 
@@ -625,7 +625,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
 
       // Borrowing one more time should resurrect the trashed connection
       allRequests.addAll(MockRequest.sendMany(1, pool));
-      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertPoolSize(pool, 2);
 
       assertThat(pool.connections[0]).containsExactly(connection2, connection1);
@@ -664,7 +664,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       allRequests.addAll(requests);
       allRequests.add(MockRequest.send(pool));
 
-      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertPoolSize(pool, 2);
       reset(factory);
       Connection connection2 = pool.connections[0].get(1);
@@ -699,7 +699,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       allRequests.addAll(requests);
       allRequests.add(MockRequest.send(pool));
       assertThat(connection2.inFlight.get()).isEqualTo(101);
-      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertPoolSize(pool, 2);
 
       // Borrow again to get the new connection
@@ -742,7 +742,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       allRequests.addAll(requests);
       allRequests.add(MockRequest.send(pool));
 
-      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertThat(pool.connections[0]).hasSize(2);
 
       // Return enough times to get back under the threshold where one connection is enough
@@ -988,7 +988,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
 
       // Should not have tried to create a new core connection since reconnection time had not
       // elapsed.
-      verify(factory, never()).open(any(HostConnectionPool.class));
+      verify(factory, never()).open(any(HostConnectionPool.class), anyInt(), anyInt());
 
       // Sleep to elapse the Reconnection Policy.
       Uninterruptibles.sleepUninterruptibly(reconnectInterval, TimeUnit.MILLISECONDS);
@@ -1003,7 +1003,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       // Should have tried to open up to core connections as result of borrowing a connection past
       // reconnect time and not being at core.
       blockingExecutor.blockUntilNextTaskCompleted();
-      verify(factory).open(any(HostConnectionPool.class));
+      verify(factory).open(any(HostConnectionPool.class), anyInt(), anyInt());
       reset(factory);
 
       // Sleep for reconnect interval to allow reconnection time to elapse.
@@ -1019,7 +1019,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       blockingExecutor.reset();
       allRequests.add(MockRequest.send(pool));
       blockingExecutor.blockUntilNextTaskCompleted();
-      verify(factory).open(any(HostConnectionPool.class));
+      verify(factory).open(any(HostConnectionPool.class), anyInt(), anyInt());
       reset(factory);
 
       // Another core connection should be opened as result of another request to get us up to core
@@ -1027,14 +1027,14 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       blockingExecutor.reset();
       allRequests.add(MockRequest.send(pool));
       blockingExecutor.blockUntilNextTaskCompleted();
-      verify(factory).open(any(HostConnectionPool.class));
+      verify(factory).open(any(HostConnectionPool.class), anyInt(), anyInt());
       reset(factory);
 
       // Sending another request should not grow the pool any more, since we are now at core
       // connections.
       allRequests.add(MockRequest.send(pool));
       verify(factory, after((reconnectInterval + readTimeout) * 2).never())
-          .open(any(HostConnectionPool.class));
+          .open(any(HostConnectionPool.class), anyInt(), anyInt());
     } finally {
       MockRequest.completeAll(allRequests);
       cluster.close();
@@ -1082,7 +1082,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       }
 
       // Pool should grow by 1.
-      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, after(2000).times(1)).open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertThat(pool.connections[0]).hasSize(2);
 
       // Reset factory mock as we'll be checking for new open() invokes later.
@@ -1110,7 +1110,8 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       assertThat(pool.connections[0]).hasSize(1);
 
       // A new connection should never have been spawned since we didn't max out core.
-      verify(factory, after(readTimeout).never()).open(any(HostConnectionPool.class));
+      verify(factory, after(readTimeout).never())
+          .open(any(HostConnectionPool.class), anyInt(), anyInt());
 
       // Borrow another connection, since we exceed max another connection should be opened.
       MockRequest request = MockRequest.send(pool);
@@ -1118,7 +1119,7 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       assertThat(request.getConnection()).isEqualTo(extra1);
 
       // After some time the a connection should attempt to be opened (but will fail).
-      verify(factory, timeout(readTimeout)).open(any(HostConnectionPool.class));
+      verify(factory, timeout(readTimeout)).open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertPoolSize(pool, 1);
       assertThat(pool.connections[0]).hasSize(1);
 
@@ -1314,7 +1315,8 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       MockRequest request = MockRequest.send(pool, 1);
 
       // Should create up to core connections.
-      verify(factory, timeout(readTimeout * 8).times(8)).open(any(HostConnectionPool.class));
+      verify(factory, timeout(readTimeout * 8).times(8))
+          .open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertPoolSize(pool, 8);
 
       request.simulateSuccessResponse();
@@ -1365,7 +1367,8 @@ public class HostConnectionPoolTest extends ScassandraTestBase.PerClassCluster {
       MockRequest request = MockRequest.send(pool, 1);
 
       // Should create up to core connections.
-      verify(factory, timeout(readTimeout).times(1)).open(any(HostConnectionPool.class));
+      verify(factory, timeout(readTimeout).times(1))
+          .open(any(HostConnectionPool.class), anyInt(), anyInt());
       assertPoolSize(pool, 1);
       Uninterruptibles.getUninterruptibly(request.requestInitialized, 10, TimeUnit.SECONDS);
       request.simulateSuccessResponse();
diff --git a/driver-core/src/test/java/com/datastax/driver/core/NettyOptionsTest.java b/driver-core/src/test/java/com/datastax/driver/core/NettyOptionsTest.java
index fbdf187a70..dd1c345929 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/NettyOptionsTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/NettyOptionsTest.java
@@ -45,7 +45,9 @@ import org.mockito.stubbing.Answer;
 import org.testng.annotations.Test;
 
 @CreateCCM(PER_METHOD)
-@CCMConfig(createCluster = false)
+@CCMConfig(
+    createCluster = false,
+    jvmArgs = {"--smp", "1"})
 public class NettyOptionsTest extends CCMTestsSupport {
 
   @Test(groups = "short")
diff --git a/driver-core/src/test/java/com/datastax/driver/core/ReconnectionTest.java b/driver-core/src/test/java/com/datastax/driver/core/ReconnectionTest.java
index b3d6be0f3c..30fafa5273 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/ReconnectionTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/ReconnectionTest.java
@@ -24,6 +24,7 @@ package com.datastax.driver.core;
 import static com.datastax.driver.core.Assertions.assertThat;
 import static com.datastax.driver.core.CreateCCM.TestMode.PER_METHOD;
 import static java.util.concurrent.TimeUnit.SECONDS;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.times;
@@ -218,7 +219,10 @@ public class ReconnectionTest extends CCMTestsSupport {
    * The connection established by a successful reconnection attempt should be reused in one of the
    * connection pools (JAVA-505).
    */
-  @CCMConfig(dirtiesContext = true, createCluster = false)
+  @CCMConfig(
+      dirtiesContext = true,
+      createCluster = false,
+      jvmArgs = {"--smp", "1"})
   @Test(groups = "long")
   public void should_use_connection_from_reconnection_in_pool() {
     TogglabePolicy loadBalancingPolicy = new TogglabePolicy(new RoundRobinPolicy());
diff --git a/driver-core/src/test/java/com/datastax/driver/core/SessionLeakTest.java b/driver-core/src/test/java/com/datastax/driver/core/SessionLeakTest.java
index aa0f573795..6eaa74e318 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/SessionLeakTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/SessionLeakTest.java
@@ -19,6 +19,7 @@ import static com.datastax.driver.core.Assertions.assertThat;
 import static com.datastax.driver.core.CreateCCM.TestMode.PER_METHOD;
 import static com.google.common.collect.Lists.newArrayList;
 import static java.util.concurrent.TimeUnit.MINUTES;
+import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
 
 import com.datastax.driver.core.exceptions.InvalidQueryException;
@@ -27,7 +28,10 @@ import java.util.concurrent.TimeUnit;
 import org.testng.annotations.Test;
 
 @CreateCCM(PER_METHOD)
-@CCMConfig(dirtiesContext = true, createCluster = false)
+@CCMConfig(
+    dirtiesContext = true,
+    createCluster = false,
+    jvmArgs = {"--smp", "1"})
 public class SessionLeakTest extends CCMTestsSupport {
 
   SocketChannelMonitor channelMonitor;
diff --git a/driver-core/src/test/java/com/datastax/driver/core/SessionStressTest.java b/driver-core/src/test/java/com/datastax/driver/core/SessionStressTest.java
index ea75f84544..ea70e9081a 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/SessionStressTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/SessionStressTest.java
@@ -38,7 +38,9 @@ import org.slf4j.LoggerFactory;
 import org.testng.annotations.AfterMethod;
 import org.testng.annotations.Test;
 
-@CCMConfig(dirtiesContext = true)
+@CCMConfig(
+    dirtiesContext = true,
+    jvmArgs = {"--smp", "1", "--max-networking-io-control-blocks", "15000"})
 public class SessionStressTest extends CCMTestsSupport {
 
   private static final Logger logger = LoggerFactory.getLogger(SessionStressTest.class);
diff --git a/driver-core/src/test/java/com/datastax/driver/core/TableMetadataTest.java b/driver-core/src/test/java/com/datastax/driver/core/TableMetadataTest.java
index 777ea439f8..a63e169dac 100644
--- a/driver-core/src/test/java/com/datastax/driver/core/TableMetadataTest.java
+++ b/driver-core/src/test/java/com/datastax/driver/core/TableMetadataTest.java
@@ -149,6 +149,7 @@ public class TableMetadataTest extends CCMTestsSupport {
   }
 
   @Test(groups = "short")
+  // Removed "WITH COMPACT STORAGE" keywords and asserts because of deprecation in Scylla
   public void should_parse_compact_static_table() {
     TestUtils.compactStorageSupportCheck(ccm());
     // given
@@ -160,17 +161,13 @@ public class TableMetadataTest extends CCMTestsSupport {
                 + "    t timeuuid,\n"
                 + "    v int,\n"
                 + "    PRIMARY KEY (k)\n"
-                + ") WITH COMPACT STORAGE;",
+                + ");",
             keyspace);
     // when
     session().execute(cql);
     TableMetadata table = cluster().getMetadata().getKeyspace(keyspace).getTable("compact_static");
     // then
-    assertThat(table)
-        .isNotNull()
-        .hasName("compact_static")
-        .hasNumberOfColumns(4)
-        .isCompactStorage();
+    assertThat(table).isNotNull().hasName("compact_static").hasNumberOfColumns(4);
     assertThat(table.getColumns().get(0)).isNotNull().hasName("k").isPartitionKey().hasType(text());
     assertThat(table.getColumns().get(1))
         .isNotNull()
@@ -190,6 +187,7 @@ public class TableMetadataTest extends CCMTestsSupport {
   }
 
   @Test(groups = "short")
+  // Removed "WITH COMPACT STORAGE" keywords and asserts because of deprecation in Scylla
   public void should_parse_dense_table() {
     TestUtils.compactStorageSupportCheck(ccm());
     // given
@@ -199,13 +197,13 @@ public class TableMetadataTest extends CCMTestsSupport {
                 + "        k int,\n"
                 + "        c int,\n"
                 + "        PRIMARY KEY (k, c)\n"
-                + "    ) WITH COMPACT STORAGE;",
+                + "    );",
             keyspace);
     // when
     session().execute(cql);
     TableMetadata table = cluster().getMetadata().getKeyspace(keyspace).getTable("dense");
     // then
-    assertThat(table).isNotNull().hasName("dense").hasNumberOfColumns(2).isCompactStorage();
+    assertThat(table).isNotNull().hasName("dense").hasNumberOfColumns(2);
     assertThat(table.getColumns().get(0)).isNotNull().hasName("k").isPartitionKey().hasType(cint());
     assertThat(table.getColumns().get(1))
         .isNotNull()
@@ -215,6 +213,7 @@ public class TableMetadataTest extends CCMTestsSupport {
   }
 
   @Test(groups = "short")
+  // Removed "WITH COMPACT STORAGE" keywords and asserts because of deprecation in Scylla
   public void should_parse_compact_dynamic_table() {
     TestUtils.compactStorageSupportCheck(ccm());
     // given
@@ -225,17 +224,13 @@ public class TableMetadataTest extends CCMTestsSupport {
                 + "    c int,\n"
                 + "    v timeuuid,\n"
                 + "    PRIMARY KEY (k, c)\n"
-                + ") WITH COMPACT STORAGE;",
+                + ");",
             keyspace);
     // when
     session().execute(cql);
     TableMetadata table = cluster().getMetadata().getKeyspace(keyspace).getTable("compact_dynamic");
     // then
-    assertThat(table)
-        .isNotNull()
-        .hasName("compact_dynamic")
-        .hasNumberOfColumns(3)
-        .isCompactStorage();
+    assertThat(table).isNotNull().hasName("compact_dynamic").hasNumberOfColumns(3);
     assertThat(table.getColumns().get(0)).isNotNull().hasName("k").isPartitionKey().hasType(text());
     assertThat(table.getColumns().get(1))
         .isNotNull()
@@ -251,6 +246,7 @@ public class TableMetadataTest extends CCMTestsSupport {
   }
 
   @Test(groups = "short")
+  // Removed "WITH COMPACT STORAGE" keywords and asserts because of deprecation in Scylla
   public void should_parse_compact_table_with_multiple_clustering_columns() {
     TestUtils.compactStorageSupportCheck(ccm());
     // given
@@ -263,18 +259,14 @@ public class TableMetadataTest extends CCMTestsSupport {
                 + "    c3 double,\n"
                 + "    v timeuuid,\n"
                 + "    PRIMARY KEY (k, c1, c2, c3)\n"
-                + ") WITH COMPACT STORAGE;",
+                + ");",
             keyspace);
     // when
     session().execute(cql);
     TableMetadata table =
         cluster().getMetadata().getKeyspace(keyspace).getTable("compact_composite");
     // then
-    assertThat(table)
-        .isNotNull()
-        .hasName("compact_composite")
-        .hasNumberOfColumns(5)
-        .isCompactStorage();
+    assertThat(table).isNotNull().hasName("compact_composite").hasNumberOfColumns(5);
     assertThat(table.getColumns().get(0)).isNotNull().hasName("k").isPartitionKey().hasType(text());
     assertThat(table.getColumns().get(1))
         .isNotNull()
diff --git a/pom.xml b/pom.xml
index a6e18ddddc..bc8827c6b1 100644
--- a/pom.xml
+++ b/pom.xml
@@ -86,6 +86,7 @@
         <scassandra.version>1.1.2</scassandra.version>
         <logback.version>1.2.13</logback.version>
         <byteman.version>3.0.8</byteman.version>
+        <surefire.version>3.0.0-M6</surefire.version>
         <ipprefix>127.0.1.</ipprefix>
         <!-- defaults below are overridden by profiles and/or submodules -->
         <test.groups>unit</test.groups>
@@ -721,7 +722,7 @@
 
                 <plugin>
                     <artifactId>maven-surefire-plugin</artifactId>
-                    <version>3.0.0-M6</version>
+                    <version>${surefire.version}</version>
                     <configuration>
                         <groups>${test.groups}</groups>
                         <useFile>false</useFile>
@@ -748,6 +749,13 @@
                             </property>
                         </properties>
                     </configuration>
+                    <dependencies>
+                        <dependency>
+                            <groupId>org.apache.maven.surefire</groupId>
+                            <artifactId>surefire-testng</artifactId>
+                            <version>${surefire.version}</version>
+                        </dependency>
+                    </dependencies>
                 </plugin>
 
                 <plugin>
